{"name":"Tutorial 4090","tagline":"","body":"# A Tour in the Basic Linux Operations\r\n\r\nA first journey in the Linux 101: navigate around, upload/download files, run programs. \r\n\r\n\r\n\r\n### Launch a Linux VM\r\n\r\n\r\nA sample output in the terminal:\r\n\r\n```\r\n$ssh azureuser@test-hpl.cloudapp.net\r\nWarning: Permanently added the RSA host key for IP address '168.63.148.188' to the list of known hosts.\r\nazureuser@test-hpl.cloudapp.net's password: \r\nWelcome to Ubuntu 12.04.3 LTS (GNU/Linux 3.2.0-57-virtual x86_64)\r\n```\r\n\r\nNow you are in a Linux machine\r\n(Precisely you have a shell called [bash](http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29) ).\r\nThis is the default remote environment you will use throughout the course.\r\n\r\n\r\n\r\n## Linux 101\r\n\r\nMain reference: http://linuxcommand.org/learning_the_shell.php\r\n\r\nConcepts to be delivered during tutorial:\r\n\r\n   * System, Process, Executable, Shell, Commands, Command-Line-Interface\r\n   * Filesystem, directory tree, \r\n     [Filesystem Hierarchy Standard](http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard)\r\n     [see also](http://linuxcommand.org/lts0040.php)\r\n   * Standard input/output, pipe\r\n\r\n### Navigation\r\n\r\n```\r\nazureuser@test-hpl:~$ pwd\r\n/home/azureuser\r\nazureuser@test-hpl:~$ ls\r\nazureuser@test-hpl:~$ cd ..\r\nazureuser@test-hpl:/home$ ls\r\nazureuser  ubuntu\r\nazureuser@test-hpl:/home$ cd ..\r\nazureuser@test-hpl:/$ ls\r\nbin   dev  home        lib    lost+found  mnt  proc  run   selinux  sys  usr  vmlinuz\r\nboot  etc  initrd.img  lib64  media       opt  root  sbin  srv      tmp  var\r\nazureuser@test-hpl:/$ pwd\r\n/\r\n```\r\n\r\n**NOTE**:\r\n` $ ` is the command prompt, after which you can type a command.\r\nAfter entering a command, there will be some output.\r\nRule of thumb: read output carefully, esp. during more complex operations later.\r\nLinux command outputs are usually self-documenting.\r\n\r\n### Seeking for help\r\n\r\n```\r\nazureuser@test-hpl:/$ ls --help\r\nUsage: ls [OPTION]... [FILE]...\r\nList information about the FILEs (the current directory by default).\r\nSort entries alphabetically if none of -cftuvSUX nor --sort is specified.\r\n\r\nMandatory arguments to long options are mandatory for short options too.\r\n  -a, --all                  do not ignore entries starting with .\r\n...\r\n```\r\n\r\n**NOTE:** \r\n`...` in the last line denotes omitted console outputs.\r\nFind the complete version by enter the corresponding command.\r\n\r\n```\r\nazureuser@test-hpl:/$ man ls\r\n\r\nLS(1)                                               User Commands                                               LS(1)\r\n\r\nNAME\r\n       ls - list directory contents\r\n\r\nSYNOPSIS\r\n       ls [OPTION]... [FILE]...\r\n\r\nDESCRIPTION\r\n       List  information  about the FILEs (the current directory by default).  Sort entries alphabetically if none of\r\n       -cftuvSUX nor --sort is specified.\r\n\r\n...\r\n\r\n       --block-size=SIZE\r\n              scale sizes by SIZE before printing them.  E.g., `--block-size=M' prints sizes in  units  of  1,048,576\r\n              bytes.  See SIZE format below.\r\n Manual page ls(1) line 1 (press h for help or q to quit)\r\n```\r\n\r\n**TIP**:\r\nUse arrow keys or `j`/`k` to move around the manual page.\r\nUse `/` to search for a keyword.\r\nPress `q` to end.\r\n\r\nWhat is the `man` command? Try `man man`\r\n\r\n### Basic file/dir operations\r\n\r\nMake directories:\r\n\r\n```\r\nazureuser@test-hpl:~$ mkdir mydir\r\nazureuser@test-hpl:~$ ls\r\nmydir\r\nazureuser@test-hpl:~$ cd mydir/\r\nazureuser@test-hpl:~/mydir$ pwd\r\n/home/azureuser/mydir\r\nazureuser@test-hpl:~/mydir$ cd ..\r\nazureuser@test-hpl:~$ ls\r\nmydir\r\nazureuser@test-hpl:~$ rmdir mydir\r\nazureuser@test-hpl:~$ ls\r\nazureuser@test-hpl:~$ \r\n```\r\n\r\nCeate and view text files:\r\n\r\n```\r\nazureuser@test-hpl:~$ echo \"this is my first file\" > myfile\r\nazureuser@test-hpl:~$ ls\r\nmyfile\r\nazureuser@test-hpl:~$ cat myfile \r\nthis is my first file\r\n```\r\n\r\n`echo` prints the string to `STDOUT`.\r\n`>` redirects `STDOUT` to a file.\r\n[More](http://www.tldp.org/LDP/abs/html/io-redirection.html) on IO redirection.\r\n\r\nWhat is `cat` then? Try `man` or `--help`.\r\n\r\nMove/Copy/Remove file:\r\n\r\n```\r\nazureuser@test-hpl:~$ ls\r\nmyfile\r\nazureuser@test-hpl:~$ cat myfile \r\nthis is my first file\r\nazureuser@test-hpl:~$ cp myfile myfile2\r\nazureuser@test-hpl:~$ ls\r\nmyfile  myfile2\r\nazureuser@test-hpl:~$ cat myfile2\r\nthis is my first file\r\nazureuser@test-hpl:~$ mv myfile myfile.moved\r\nazureuser@test-hpl:~$ ls\r\nmyfile2  myfile.moved\r\nazureuser@test-hpl:~$ rm myfile2\r\nazureuser@test-hpl:~$ ls\r\nmyfile.moved\r\n```\r\n\r\n**TIP**:\r\nDo more experiments like this.\r\nUse `ls` (probably with options like `-a`, `-l`) to inspect a dir.\r\nUse `cat` or `less`/`more` to inspect the content of a text file.\r\n\r\nAbout filename:\r\n\r\n   * Basically a flat string. \r\n   No concept of \"extension name\".\r\n   Though, people may have naming conventions sometime.\r\n   * Files start with `.` is \"hidden\".\r\n   Use `ls -a` to see them.\r\n\r\n### File transfer\r\n\r\nMajor methods:\r\n\r\n   * `scp`/`sftp` under Linux/Mac\r\n   * An open source and cross-platform SFTP client: \r\n   [FileZilla](https://filezilla-project.org/)\r\n   * An SFTP client under windows: [WinSCP](http://winscp.net/eng/index.php)\r\n\r\nPick the one that suits you most.\r\n\r\nTasks:\r\n\r\n   * Create a text file in your desktop. \r\n   Upload it to the server.\r\n   Verify it is same as the file you created locally.\r\n   * Create a text file in your server.\r\n   Download it to your desktop.\r\n   Verify it is same as the file you created remotely.\r\n\r\n![](filezilla_config.png)\r\n\r\n![](filezilla_connected.png)\r\n\r\n### File download from the Internet\r\n\r\n```\r\nazureuser@test-hpl:~$ mkdir try-wget\r\nazureuser@test-hpl:~$ cd try-wget/\r\nazureuser@test-hpl:~/try-wget$ wget 'https://github.com/hupili/agile-ir/raw/master/data/Shakespeare.tar.gz'\r\n--2014-01-14 03:02:09--  https://github.com/hupili/agile-ir/raw/master/data/Shakespeare.tar.gz\r\nResolving github.com (github.com)... 192.30.252.131\r\n\r\n...\r\n\r\nazureuser@test-hpl:~/try-wget$ ls\r\nShakespeare.tar.gz\r\n```\r\n\r\nNow you have downloaded Shakespeare's works, all in one compressed archive `Shakespeare.tar.gz`.\r\nFollowing is a shortcut to uncompress it:\r\n\r\n```\r\nazureuser@test-hpl:~/try-wget$ tar -xzvf Shakespeare.tar.gz \r\ndata/\r\ndata/sonnet-59.txt\r\ndata/sonnet-139.txt\r\ndata/sonnet-88.txt\r\ndata/sonnet-123.txt\r\ndata/sonnet-137.txt\r\ndata/play-twogents.txt\r\n\r\n...\r\n\r\ndata/sonnet-134.txt\r\ndata/sonnet-93.txt\r\ndata/sonnet-24.txt\r\ndata/sonnet-3.txt\r\ndata/play-juliuscaesar.txt\r\n```\r\n\r\nWhat's `-xzvf`? Try `man` or `--help`.\r\n\r\n**NOTE**:\r\nSome commands have shorthand notation for multiple options.\r\nIn the above example, `tar -xzvf YOUR_FILE` is equivalent of `tar -x -z -v -f YOUR_FILE`.\r\nTry the latter one yourself.\r\n\r\n**EXERCISE**:\r\nNavigate the `data` dir and operate on those files, e.g. `cp`, `mv`.\r\n\r\n**EXERCISE**:\r\nGet familiar with `tar`, `zip`, `gzip`, `bzip2`.\r\nYou are very likely to get others' data in those formats.\r\n\r\n**EXERCISE**:\r\nGet familiar with `wget` options.\r\nA simple crawler can be obtained by `wget -r START_URL`.\r\n\r\n**EXERCISE**:\r\nTry to use `curl` to download the same file.\r\nMost Linux distribution has `wget` and/or `curl` by default.\r\n\r\nSuppose you have finished processing `data`.\r\nCleanup as follows:\r\n\r\n```\r\nazureuser@test-hpl:~/try-wget$ ls\r\ndata  Shakespeare.tar.gz\r\nazureuser@test-hpl:~/try-wget$ ls data/\r\nplay-12night.txt         play-titus.txt              sonnet-122.txt  sonnet-152.txt  sonnet-42.txt  sonnet-72.txt\r\n\r\n...\r\n\r\nplay-tempest.txt         sonnet-120.txt              sonnet-150.txt  sonnet-40.txt   sonnet-70.txt\r\nplay-timonathens.txt     sonnet-121.txt              sonnet-151.txt  sonnet-41.txt   sonnet-71.txt\r\nazureuser@test-hpl:~/try-wget$ rm -rf data/\r\nazureuser@test-hpl:~/try-wget$ ls\r\nShakespeare.tar.gz\r\n```\r\n\r\n`rm -rf` is a powerful command.\r\nUse with great care.\r\n\r\n### Execute an executable file\r\n\r\nWrite your first shell script\r\n\r\n```\r\nazureuser@test-hpl:~$ cat > hello.sh\r\necho \"hello world. My first shell script!\"\r\nazureuser@test-hpl:~$ ls\r\nhello.sh\r\nazureuser@test-hpl:~$ cat hello.sh \r\necho \"hello world. My first shell script!\"\r\n```\r\n\r\n`cat >` reads STDIN and redirect all the content to `hello.sh`.\r\nThe second line `echo \"hello world. My first shell script!\"` is typed by you.\r\nAfter that press `ctrl+d` to end typing.\r\n\r\n**EXERCISE**:\r\nTry this way to create more files.\r\nThis is the simplest way to write small text files without using a text-based editor.\r\n\r\nMake it executable:\r\n\r\n```\r\nazureuser@test-hpl:~$ ls -l hello.sh \r\n-rw-rw-r-- 1 azureuser azureuser 43 Jan 14 07:26 hello.sh\r\nazureuser@test-hpl:~$ chmod a+x hello.sh \r\nazureuser@test-hpl:~$ ls -l hello.sh \r\n-rwxrwxr-x 1 azureuser azureuser 43 Jan 14 07:26 hello.sh\r\n```\r\n\r\nThe `x` character indicates that the file is executable.\r\nRead [more](http://en.wikipedia.org/wiki/File_system_permissions).\r\n\r\nExecute it:\r\n\r\n```\r\nazureuser@test-hpl:~$ ./hello.sh \r\nhello world. My first shell script!\r\nazureuser@test-hpl:~$ /home/azureuser/hello.sh \r\nhello world. My first shell script!\r\n```\r\n\r\n**NOTE**:\r\nOne often ignored syntax:\r\nIf the executable is under current working directory, prefix it with `./`.\r\nOr else, the system will try to locate that command in [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\r\n\r\n### About shell commands (optional)\r\n\r\nThe commands you use, e.g. `ls`, `cd`, `mkdir`, are just some pre-installed executables in the system.\r\nYou can find their location and verify that they are executable:\r\n\r\n```\r\nazureuser@test-hpl:~$ which ls\r\n/bin/ls\r\nazureuser@test-hpl:~$ ls -l /bin/ls\r\n-rwxr-xr-x 1 root root 105840 Nov 19  2012 /bin/ls\r\n```\r\n\r\n`which` itself is an executable file:\r\n\r\n```\r\nazureuser@test-hpl:~$ which which \r\n/usr/bin/which\r\nazureuser@test-hpl:~$ ls -l /usr/bin/which\r\nlrwxrwxrwx 1 root root 10 Mar 29  2012 /usr/bin/which -> /bin/which\r\nazureuser@test-hpl:~$ ls -l /bin/which \r\n-rwxr-xr-x 1 root root 946 Mar 29  2012 /bin/which\r\n```\r\n\r\n### Automate your work by shell\r\n\r\nCreate a script, `download.sh` , with the following content. \r\n\r\n```bash\r\n# Clean previously downloaded data\r\nrm -f Shakespeare.tar.gz\r\nrm -rf data/\r\n# Download\r\nwget 'https://github.com/hupili/agile-ir/raw/master/data/Shakespeare.tar.gz'\r\n# Uncompress \r\ntar -xzvf Shakespeare.tar.gz \r\n# list files\r\nls data/\r\n```\r\n\r\n**TIP**:\r\nNo need to type in.\r\nUse `cat >` and copy paste the content into your terminal.\r\nThe paste operations are different across terminals.\r\n\r\nContent after `#` is comment.\r\n\r\nNow execute the script:\r\n\r\n```\r\nazureuser@test-hpl:~$ chmod a+x download.sh \r\nazureuser@test-hpl:~$ ./download.sh \r\n\r\n...\r\n```\r\n\r\nThe result is same as that when you type those commands in shell one by one directly.\r\nBy writing scripts, you can automate tedious daily jobs.\r\nYou will see some of this in the later part of this course.\r\n\r\n**EXERCISE**:\r\nShell scripts also supports common programming constructs, e.g. condition, loop, etc.\r\nTry to self-learn them from the Internet.\r\nGoogle \"bash script\" or something similar.\r\n\r\n## Linux 102 (optional)\r\n\r\nThose are optional in the first tutorial due to time limit\r\nbut we will encounter them in following tutorials.\r\nJust-In-Time instructions will be given\r\nbut it's strongly recommended that you warm up at the earliest convenience. \r\n\r\n### Text editor -- VIM and others\r\n\r\nWith linux 101, you can at least operate in the following way:\r\n\r\n   * Write codes in your desktop locally with you favourite GUI editor.\r\n   * Upload codes and data to that Linux server.\r\n   * Execute.\r\n   * Download result and analyze.\r\n\r\nThis upload/download cycle causes considerable overheads when you need to frequently modify codes or configuraiton files.\r\n\r\n[VIM](http://www.vim.org/) is a powerful text editor.\r\nThere are many tutorials and guides online.\r\n\r\n[Emacs](http://www.gnu.org/software/emacs/) is also a widely available and highly customizable text editor.\r\nIt's interesting to learn some Emacs basic operations and concepts.\r\n\r\nSometimes, [nano](http://www.nano-editor.org/) will be fired up to input cerntain information.\r\n\r\nText editors are just tools.\r\nPick one that is most convenient to you.\r\n\r\n### Package management\r\n\r\nCheatsheet for Ubuntu:\r\n\r\n   * `sudo apt-get install PACKAGE`\r\n   * `sudo apt-get purge PACKAGE`\r\n   * `sudo apt-file search FILE_NAME`\r\n\r\nUbuntu will friendly prompt you for package installation.\r\ne.g. installing [Git](http://git-scm.com/)\r\n\r\n```\r\nazureuser@test-hpl:~$ git\r\nThe program 'git' is currently not installed.  You can install it by typing:\r\nsudo apt-get install git\r\nazureuser@test-hpl:~$ sudo apt-get install git\r\nReading package lists... Done\r\nBuilding dependency tree\r\n\r\n...\r\n\r\nAfter this operation, 15.2 MB of additional disk space will be used.\r\nDo you want to continue [Y/n]? y\r\nGet:1 http://azure.archive.ubuntu.com/ubuntu/ precise/main liberror-perl all 0.17-1 [23.8 kB]\r\n\r\n...\r\n\r\nSetting up git-man (1:1.7.9.5-1) ...\r\nSetting up git (1:1.7.9.5-1) ...\r\nazureuser@test-hpl:~$ git\r\nusage: git [--version] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\r\n           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]\r\n\r\n...\r\n\r\n   rm         Remove files from the working tree and from the index\r\n   show       Show various types of objects\r\n   status     Show the working tree status\r\n   tag        Create, list, delete or verify a tag object signed with GPG\r\n\r\nSee 'git help <command>' for more information on a specific command.\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}